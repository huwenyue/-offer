//随机种子生成单链表，分别使用栈和递归的方式从尾到头打印出来
#include <iostream>
#include <stack>
#include <stdlib.h>
#include <time.h>
using namespace std;

//使用栈实现链表从尾到头打印
typedef struct node{
    int data;
    struct node* next;
}Node;

//创建含有n个结点的单链表
Node *create(int n){
    Node *head;
    head = (Node*)malloc(sizeof(Node));  //创建头结点
    head->next = NULL;  //头结点不需要数据域，指针域初始为NULL
    Node *q = head;   //记录前驱结点q为head
    //初始化随机数种子
    srand(time(0));  //time(0)是当前时间值
    for (int i=0; i<n; i++) {
        Node *p = (Node *)malloc(sizeof(Node));  //新建结点
        p->data = rand()%100+1;  //随机生成100以内的数字
        p->next = NULL;   // 新结点的指针域设为NULL
        q->next = p;//前驱结点的指针域设为当前新建结点的地址
        q = p;  //把q设为p,作为下个结点的前驱结点
    }
    return head;  //返回头结点指针
}

//用栈实现从尾到头打印单链表
void listReverse(Node *head){
    Node *p = head->next;
    stack<int> s;
    while (head!=NULL && p!=NULL) {
        //入栈
        s.push(p->data);
        p = p->next;
    }
    while (!s.empty()) {
        //出栈
        cout<<s.top()<<" ";
        s.pop();
    }
    cout<<endl;
}

//用递归实现从尾到头打印单链表
void recurReverse(Node *head){
    Node *p;
    if(head==NULL ||head->next==NULL)
    return;
    else{
        p = head->next;
        recurReverse(p);
        cout<<p->data<<" ";
    }
}

//打印单链表
void print(Node *head){
    Node *p;
    if(head->next==NULL){
        cout<<"The LinkList is Empty!"<<endl;
        return;
    }
    p=head->next;
    while (p!=NULL) {
        cout<<p->data<<" ";
        p=p->next;
    }
}

int main(){
    Node *singleLinkList = NULL;
    int length;
    cout<<"Please input the length of LinkList: ";
    cin>>length;
    singleLinkList = create(length);
    cout<<"The new created LinkList as below: ";
    print(singleLinkList);
    cout<<endl;
    
    cout<<"Reverse print LinkList by stack: ";
    listReverse(singleLinkList);
    cout<<endl;
    
    cout<<"Reverse print LinkList by recursion: ";
    recurReverse(singleLinkList);
    cout<<endl;
    
    return 0;
}
