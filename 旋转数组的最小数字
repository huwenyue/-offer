//数组的旋转：把一个数组的最开始的若干个元素搬到数组的末尾，使用二分查找法
#include <stdio.h>
#include <exception>
#include <iostream>
using namespace std;

int MinInOrder(int* numbers,int index1,int index2);

int Min(int* numbers, int length){
    if(numbers==NULL || length<=0){
        throw "Invalid parameters";
    }
    int index1 = 0;
    int index2 = length-1;
    //将indexMid初始化为index1，因为若数组中第一个数字小于最后一个数字，则该数组是有序的，可以直接返回第一个数字
    int indexMid = index1;
    while (numbers[index1]>=numbers[index2]) {
        if(index2-index1==1){
            indexMid = index2;  //若index1与index2相邻，则index2最小，赋给indexMid
            break;
        }
        indexMid = (index1+index2)/2;
        //若index1,index2,indexMid指向的三个数字相等，则只能顺序查找
        if(numbers[index1]==numbers[index2] && numbers[indexMid]==numbers[index1]){
            return MinInOrder(numbers,index1,index2);
        }
        if(numbers[indexMid]>=numbers[index1])
        index1 = indexMid;
        else if(numbers[indexMid]<=numbers[index2])
        index2 = indexMid;
    }
    return numbers[indexMid];
}
int MinInOrder(int* numbers,int index1,int index2){
    int result = numbers[index1];
    for (int i=index1+1; i<=index2; i++) {
        if(result>numbers[i]){
            result = numbers[i];
        }
    }
    return result;
}
int main(){
    int num[] = {1,0,1,1,1};  //测试用例
    int number = Min(num, 5);
    printf("%d\n",number);
    return 0;
}
