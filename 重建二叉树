//给出二叉树的前序遍历和中序遍历，求层序遍历
#include <cstdio>
#include <cstring>
#include <queue>
#include <algorithm>
using namespace std;
const int maxn = 50;
struct node{
    int data;
    node* lchild;
    node* rchild;
};
int pre[maxn],in[maxn];  //先序，中序
int n; //结点个数

//前序序列区间为[preL,preR],中序序列区间为[inL,inR]
//create函数返回构建出的二叉树的根结点地址
node* create(int preL,int preR,int inL,int inR){
    if(preL>preR)
    return NULL;
    node* root = new node;  //构造新结点，用来存放当前二叉树的根结点
    root->data =pre[preL];  //新结点的数据域为前序序列区间的第一个值
    int k;
    for(k=inL;k<=inR;k++){
        if(in[k] == pre[preL]){
            //中序序列中找到根结点
            break;
        }
    }
    int numLeft = k-inL;  // 中序序列中的根结点下标减去起始结点下标，即为左子树的结点个数
    //将左子树根结点的地址赋给root的左指针
    root->lchild = create(preL+1, preL+numLeft, inL, k-1);
    //右子树
    root->rchild = create(preL+numLeft+1, preR, k+1, inR);
    return root;
}

//层序遍历
int num=0;  //已输出的结点个数
void BFS(node* root){
    queue<node*> q;  //队列里存的是地址
    q.push(root);//根结点地址入队
    while (!q.empty()) {
        node* now = q.front();  //取出队首元素
        q.pop();
        printf("%d",now->data);
        num++;  //输出的结点个数+1
        if(num<n){
            //输出的结点个数小于总结点数
            printf(" ");
        }
        if(now->lchild!=NULL){
            //左子树非空
            q.push(now->lchild);
        }
        if(now->rchild!=NULL){
            //右子树非空
            q.push(now->rchild);
        }
    }
}

int  main(){
    scanf("%d",&n);  //输入结点个数
    for(int i=0;i<n;i++){
        scanf("%d",&pre[i]);
    }
    for(int i=0;i<n;i++){
        scanf("%d",&in[i]);
    }
    node* root = create(0, n-1, 0, n-1);  //建树
    BFS(root);  //层序遍历
    return 0;
}
